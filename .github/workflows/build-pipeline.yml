name: Build
# Controls when the workflow will run
on:
  # Triggers the workflow on push events
  push:
    branches: [ develop, release/**, main, feature/** ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # First job in the workflow installs and verifies the software
  build:
    name: Build, Test, Verify, Publish
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.3
        with:
          poetry-version: 1.1.8

      - name: Get version
              id: get-version
              run: |
                echo "::set-output name=current_version::$(poetry version | awk '{print $2}')"
                echo "pyproject_name=$(poetry version | awk '{print $1}')" >> $GITHUB_ENV

      - name: Bump pre-alpha version
              # If triggered by push to a feature branch
              if: ${{ startsWith(github.ref, 'refs/heads/feature/') }}
              run: |
                new_ver="${{ steps.get-version.outputs.current_version }}+$(git rev-parse --short ${GITHUB_SHA})"
                poetry version $new_ver
                echo "software_version=$(poetry version | awk '{print $2}')" >> $GITHUB_ENV

      - name: Bump alpha version
              # If triggered by push to the develop branch
              if: ${{ github.ref == 'refs/heads/develop' }}
              run: |
                poetry version prerelease
                echo "software_version=$(poetry version | awk '{print $2}')" >> $GITHUB_ENV
                echo "venue=sit" >> $GITHUB_ENV

      - name: Bump rc version
              # If triggered by push to a release branch
              if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
              env:
                # True if the version already has a 'rc' pre-release identifier
                BUMP_RC: ${{ contains(steps.get-version.outputs.current_version, 'rc') }}
              run: |
                if [ "$BUMP_RC" = true ]; then
                  poetry version prerelease
                else
                  poetry version ${GITHUB_REF#refs/heads/release/}-rc.1
                fi
                echo "software_version=$(poetry version | awk '{print $2}')" >> $GITHUB_ENV
                echo "venue=uat" >> $GITHUB_ENV

      - name: Release version
              # If triggered by push to the main branch
              if: ${{ startsWith(github.ref, 'refs/heads/main') }}
              env:
                CURRENT_VERSION: ${{ steps.get-version.outputs.current_version }}
              # Remove -rc.* from end of version string
              # The ${string%%substring} syntax below deletes the longest match of $substring from back of $string.
              run: |
                poetry version ${CURRENT_VERSION%%-rc.*}
                echo "software_version=$(poetry version | awk '{print $2}')" >> $GITHUB_ENV
                echo "venue=ops" >> $GITHUB_ENV

      - name: Install cumulus_granule_to_cnm
              run: poetry install

      - name: Test and coverage
              run: poetry run pytest --cov cumulus_granule_to_cnm tests -v

      - name: Commit Version Bump
              # If building develop, a release branch, or main then we commit the version bump back to the repo
              if: |
                github.ref == 'refs/heads/develop' ||
                github.ref == 'refs/heads/main'    ||
                startsWith(github.ref, 'refs/heads/release')
              run: |
                git config --global user.name 'concise bot'
                git config --global user.email 'concise@noreply.github.com'
                git commit -am "/version ${{ env.software_version }}"
                git push

      - name: Push Tag
              uses: actions-ecosystem/action-push-tag@v1
              if: |
                github.ref == 'refs/heads/develop' ||
                github.ref == 'refs/heads/main'    ||
                startsWith(github.ref, 'refs/heads/release')
              with:
                tag: ${{ env.software_version }}
                message: "Version ${{ env.software_version }}"

      - name: Build Python Artifact
              run: sh ./build.sh